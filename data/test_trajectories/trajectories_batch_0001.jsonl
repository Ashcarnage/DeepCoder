{"id": 1, "problem": {"id": "best_time_to_buy_sell_stock", "title": "Best Time to Buy and Sell Stock", "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\n\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n\nExample 1:\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\nExample 2:\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.", "difficulty": "easy", "category": "array", "examples": [{"input": "prices = [7,1,5,3,6,4]", "output": "5"}, {"input": "prices = [7,6,4,3,1]", "output": "0"}], "constraints": "1 <= prices.length <= 10^5, 0 <= prices[i] <= 10^4"}, "trajectory": {"steps": [{"step_type": "thought", "content": "<think>\nOkay, I need to solve this problem where I have an array of stock prices, and I want to find the maximum profit I can make by buying and then selling on a future day. If I can't make any profit, I should return 0.\n\nLet me think about how to approach this. So, the problem is similar to the \"Best Time to Buy and Sell Stock\" problem I've heard about before. The goal is to maximize the profit by choosing the best buy and sell days.\n\nHmm, the key here is to find the maximum difference between a selling price and a buying price, with the condition that the selling day is after the buying day. So, for each day, I want to know the minimum price that occurred before it and then calculate the possible profit.\n\nWait, maybe I can iterate through the array and keep track of the minimum price seen so far. For each day, I calculate the profit as the current price minus the minimum price up to that day. Then, I keep track of the maximum profit found.\n\nLet me outline the steps:\n\n1. Initialize max_profit to 0. This will store the maximum profit found so far.\n2. Initialize min_price to the first element of the prices array. This will track the minimum price seen up to the current day.\n3. Loop through each price in the prices array starting from the first day:\n   a. For the current price, calculate the profit if we sell on this day. That's current_price - min_price.\n   b. If this profit is greater than max_profit, update max_profit.\n   c. Update min_price to be the minimum of min_price and current_price. This ensures that min_price is always the lowest price up to the current day.\n4. After processing all days, return max_profit.\n\nWait, but what if all the prices are decreasing? Like in example 2, where the output is 0. The algorithm should correctly return 0 because the max_profit would never be positive.\n\nLet me test this logic with example 1:\n\nExample 1: prices = [7,1,5,3,6,4]\n- Initialize max_profit = 0, min_price =7.\n- Day 1 (price=1): profit =1-7= -6, which is less than max_profit (0). So max_profit remains 0. Then, min_price is updated to 1.\n- Day 2 (price=5): profit=5-1=4. Max_profit becomes 4. Min_price remains 1.\n- Day3 (price=3): profit=3-1=2. Max_profit remains 4. Min_price is still 1.\n- Day4 (price=6): profit=6-1=5. Max_profit is now 5. Min_price remains 1.\n- Day5 (price=4): profit=4-1=3. Max_profit stays 5.\nSo the output is 5, which matches the example.\n\nExample 2: prices = [7,6,4,3,1]\n- max_profit=0, min_price=7.\n- Day1 (6): profit=6-7=-1. Max_profit remains 0. min_price updated to 6.\n- Day2 (4): 4-6=-2. Max_profit still 0. min_price is 4.\n- Day3 (3): 3-4=-1. Max_profit 0. min_price 3.\n- Day4 (1): 1-3=-2. Max_profit 0.\nSo the output is 0, correct.\n\nWhat about a case where the best buy is not the first occurrence of the minimum? Like prices = [2, 4, 1, 5]. Let's see:\n\n- max_profit=0, min_price=2.\n- Day1 (4): profit 2, max_profit=2. min_price remains 2.\n- Day2 (1): profit 1-2=-1. Max_profit remains 2. min_price updated to 1.\n- Day3 (5): 5-1=4. Max_profit becomes 4.\nSo the correct answer is 4.\n\nThis logic seems solid. Now, I'll write the Python code implementing this approach.\n\nThe code will:\n\n- Check if the prices list is empty or has less than 2 elements, return 0.\n- Initialize max_profit and min_price as the first element.\n- Loop from the second element to the end:\n   - calculate current_profit\n   - update max_profit if needed\n   - update min_price\n- Return max_profit.\n\nWait, but in the code, for the initial min_price, should I set it to prices[0], and then start the loop from index 1?\n\nYes.\n\nSo the code would look like:\n\ndef maxProfit(prices):\n    if not prices or len(prices) <2:\n        return 0\n    max_profit = 0\n    min_price = prices[0]\n    for price in prices[1:]:\n        current_profit = price - min_price\n        if current_profit > max_profit:\n            max_profit = current_profit\n        if price < min_price:\n            min_price = price\n    return max_profit\n\nWait, but in the loop, for each price, we first calculate the profit, then update the min_price. That makes sense because the next day's min_price should be the minimum up to that day.\n\nLet me test this code with example 1:\n\nprices = [7,1,5,3,6,4]\n\nLoop starts from 1 (price=1):\n\ncurrent_profit = 1-7 = -6. max_profit remains 0. min_price becomes 1.\n\nNext price=5: 5-1=4>0, so max_profit=4. min_price remains 1.\n\nprice=3: 3-1=2. max_profit remains 4. min_price still 1.\n\nprice=6: 6-1=5>4. max_profit becomes 5. min_price still 1.\n\nprice=4:4-1=3. max_profit remains 5.\n\nSo correct.\n\nAnother test case: [2,4,1,5]\n\nmax_profit starts at 0, min_price=2.\n\nprice=4: profit 2, max_profit=2. min_price remains 2.\n\nprice=1: profit -1, max_profit remains 2. min_price becomes 1.\n\nprice=5: profit 4. max_profit becomes 4.\n\nSo correct.\n\nAnother test case: [3,2,6,5,0,3]\n\nLet's see:\n\nmin_price=3.\n\nprice=2: profit -1. max_profit 0. min_price=2.\n\nprice=6: 6-2=4. max_profit=4. min_price remains 2.\n\nprice=5:5-2=3. max_profit remains 4.\n\nprice=0: 0-2=-2. max_profit remains 4. min_price becomes 0.\n\nprice=3:3-0=3. max_profit remains 4.\n\nSo the maximum profit is 4, which is correct.\n\nWhat about if the array is increasing? Like [1,2,3,4,5]. The max profit would be 4 (5-1=4).\n\nIn the code, min_price starts at 1. Each subsequent price is higher, so each step increases the profit. So yes.\n\nWhat if the array is all the same? Like [5,5,5]. The profit would be 0, which is correct.\n\nWhat if the array has two elements, [2,3]. Then profit is 1.\n\nSo the code should handle all these cases.\n\nI think this approach is correct and efficient, as it's O(n) time and O(1) space.\n</think>\n\nTo solve this problem, we need to determine the maximum profit that can be achieved by buying and selling a stock on different days, where the selling day is in the future relative to the buying day. If no profit can be made, we should return 0.\n\n### Approach\nThe approach to solve this problem efficiently involves iterating through the stock prices while keeping track of the minimum price seen so far and the maximum profit that can be achieved. Here are the detailed steps:\n\n1. **Initialization**: Start by initializing `max_profit` to 0 and `min_price` to the price on the first day. This sets up the initial conditions for tracking the minimum price and the maximum profit.\n\n2. **Iterate Through Prices**: Loop through each price starting from the second day. For each price:\n   - Calculate the potential profit if the stock were sold on the current day after buying it at the `min_price` seen so far.\n   - Update `max_profit` if the calculated profit is greater than the current `max_profit`.\n   - Update `min_price` to be the minimum of the current `min_price` and the current price. This ensures that `min_price` always holds the lowest price encountered up to the current day.\n\n3. **Return Result**: After processing all prices, return `max_profit`, which will be the maximum achievable profit or 0 if no profit is possible.\n\nThis approach ensures that we only traverse the list once, making the solution efficient with a time complexity of O(n) and a space complexity of O(1).\n\n### Solution Code\n```python\ndef maxProfit(prices):\n    if not prices or len(prices) < 2:\n        return 0\n    max_profit = 0\n    min_price = prices[0]\n    for price in prices[1:]:\n        current_profit = price - min_price\n        if current_profit > max_profit:\n            max_profit = current_profit\n        if price < min_price:\n            min_price = price\n    return max_profit\n```\n\n### Explanation\n- **", "metadata": null, "timestamp": null}], "final_answer": "<think>\nOkay, I need to solve this problem where I have an array of stock prices, and I want to find the maximum profit I can make by buying and then selling on a future day. If I can't make any profit, I should return 0.\n\nLet me think about how to approach this. So, the problem is similar to the \"Best Time to Buy and Sell Stock\" problem I've heard about before. The goal is to maximize the profit by choosing the best buy and sell days.\n\nHmm, the key here is to find the maximum difference between a selling price and a buying price, with the condition that the selling day is after the buying day. So, for each day, I want to know the minimum price that occurred before it and then calculate the possible profit.\n\nWait, maybe I can iterate through the array and keep track of the minimum price seen so far. For each day, I calculate the profit as the current price minus the minimum price up to that day. Then, I keep track of the maximum profit found.\n\nLet me outline the steps:\n\n1. Initialize max_profit to 0. This will store the maximum profit found so far.\n2. Initialize min_price to the first element of the prices array. This will track the minimum price seen up to the current day.\n3. Loop through each price in the prices array starting from the first day:\n   a. For the current price, calculate the profit if we sell on this day. That's current_price - min_price.\n   b. If this profit is greater than max_profit, update max_profit.\n   c. Update min_price to be the minimum of min_price and current_price. This ensures that min_price is always the lowest price up to the current day.\n4. After processing all days, return max_profit.\n\nWait, but what if all the prices are decreasing? Like in example 2, where the output is 0. The algorithm should correctly return 0 because the max_profit would never be positive.\n\nLet me test this logic with example 1:\n\nExample 1: prices = [7,1,5,3,6,4]\n- Initialize max_profit = 0, min_price =7.\n- Day 1 (price=1): profit =1-7= -6, which is less than max_profit (0). So max_profit remains 0. Then, min_price is updated to 1.\n- Day 2 (price=5): profit=5-1=4. Max_profit becomes 4. Min_price remains 1.\n- Day3 (price=3): profit=3-1=2. Max_profit remains 4. Min_price is still 1.\n- Day4 (price=6): profit=6-1=5. Max_profit is now 5. Min_price remains 1.\n- Day5 (price=4): profit=4-1=3. Max_profit stays 5.\nSo the output is 5, which matches the example.\n\nExample 2: prices = [7,6,4,3,1]\n- max_profit=0, min_price=7.\n- Day1 (6): profit=6-7=-1. Max_profit remains 0. min_price updated to 6.\n- Day2 (4): 4-6=-2. Max_profit still 0. min_price is 4.\n- Day3 (3): 3-4=-1. Max_profit 0. min_price 3.\n- Day4 (1): 1-3=-2. Max_profit 0.\nSo the output is 0, correct.\n\nWhat about a case where the best buy is not the first occurrence of the minimum? Like prices = [2, 4, 1, 5]. Let's see:\n\n- max_profit=0, min_price=2.\n- Day1 (4): profit 2, max_profit=2. min_price remains 2.\n- Day2 (1): profit 1-2=-1. Max_profit remains 2. min_price updated to 1.\n- Day3 (5): 5-1=4. Max_profit becomes 4.\nSo the correct answer is 4.\n\nThis logic seems solid. Now, I'll write the Python code implementing this approach.\n\nThe code will:\n\n- Check if the prices list is empty or has less than 2 elements, return 0.\n- Initialize max_profit and min_price as the first element.\n- Loop from the second element to the end:\n   - calculate current_profit\n   - update max_profit if needed\n   - update min_price\n- Return max_profit.\n\nWait, but in the code, for the initial min_price, should I set it to prices[0], and then start the loop from index 1?\n\nYes.\n\nSo the code would look like:\n\ndef maxProfit(prices):\n    if not prices or len(prices) <2:\n        return 0\n    max_profit = 0\n    min_price = prices[0]\n    for price in prices[1:]:\n        current_profit = price - min_price\n        if current_profit > max_profit:\n            max_profit = current_profit\n        if price < min_price:\n            min_price = price\n    return max_profit\n\nWait, but in the loop, for each price, we first calculate the profit, then update the min_price. That makes sense because the next day's min_price should be the minimum up to that day.\n\nLet me test this code with example 1:\n\nprices = [7,1,5,3,6,4]\n\nLoop starts from 1 (price=1):\n\ncurrent_profit = 1-7 = -6. max_profit remains 0. min_price becomes 1.\n\nNext price=5: 5-1=4>0, so max_profit=4. min_price remains 1.\n\nprice=3: 3-1=2. max_profit remains 4. min_price still 1.\n\nprice=6: 6-1=5>4. max_profit becomes 5. min_price still 1.\n\nprice=4:4-1=3. max_profit remains 5.\n\nSo correct.\n\nAnother test case: [2,4,1,5]\n\nmax_profit starts at 0, min_price=2.\n\nprice=4: profit 2, max_profit=2. min_price remains 2.\n\nprice=1: profit -1, max_profit remains 2. min_price becomes 1.\n\nprice=5: profit 4. max_profit becomes 4.\n\nSo correct.\n\nAnother test case: [3,2,6,5,0,3]\n\nLet's see:\n\nmin_price=3.\n\nprice=2: profit -1. max_profit 0. min_price=2.\n\nprice=6: 6-2=4. max_profit=4. min_price remains 2.\n\nprice=5:5-2=3. max_profit remains 4.\n\nprice=0: 0-2=-2. max_profit remains 4. min_price becomes 0.\n\nprice=3:3-0=3. max_profit remains 4.\n\nSo the maximum profit is 4, which is correct.\n\nWhat about if the array is increasing? Like [1,2,3,4,5]. The max profit would be 4 (5-1=4).\n\nIn the code, min_price starts at 1. Each subsequent price is higher, so each step increases the profit. So yes.\n\nWhat if the array is all the same? Like [5,5,5]. The profit would be 0, which is correct.\n\nWhat if the array has two elements, [2,3]. Then profit is 1.\n\nSo the code should handle all these cases.\n\nI think this approach is correct and efficient, as it's O(n) time and O(1) space.\n</think>\n\nTo solve this problem, we need to determine the maximum profit that can be achieved by buying and selling a stock on different days, where the selling day is in the future relative to the buying day. If no profit can be made, we should return 0.\n\n### Approach\nThe approach to solve this problem efficiently involves iterating through the stock prices while keeping track of the minimum price seen so far and the maximum profit that can be achieved. Here are the detailed steps:\n\n1. **Initialization**: Start by initializing `max_profit` to 0 and `min_price` to the price on the first day. This sets up the initial conditions for tracking the minimum price and the maximum profit.\n\n2. **Iterate Through Prices**: Loop through each price starting from the second day. For each price:\n   - Calculate the potential profit if the stock were sold on the current day after buying it at the `min_price` seen so far.\n   - Update `max_profit` if the calculated profit is greater than the current `max_profit`.\n   - Update `min_price` to be the minimum of the current `min_price` and the current price. This ensures that `min_price` always holds the lowest price encountered up to the current day.\n\n3. **Return Result**: After processing all prices, return `max_profit`, which will be the maximum achievable profit or 0 if no profit is possible.\n\nThis approach ensures that we only traverse the list once, making the solution efficient with a time complexity of O(n) and a space complexity of O(1).\n\n### Solution Code\n```python\ndef maxProfit(prices):\n    if not prices or len(prices) < 2:\n        return 0\n    max_profit = 0\n    min_price = prices[0]\n    for price in prices[1:]:\n        current_profit = price - min_price\n        if current_profit > max_profit:\n            max_profit = current_profit\n        if price < min_price:\n            min_price = price\n    return max_profit\n```\n\n### Explanation\n- **", "success": true, "total_tokens": 2421, "execution_time": 7.636772871017456, "metadata": {"tools_used": [], "step_count": 1}}, "generated_at": "2025-05-29T13:43:46.277933"}
